/*! grafana - v4.0.2-1481203731 - 2016-12-08
 * Copyright (c) 2016 Torkel Ã–degaard; Licensed Apache-2.0 */

System.register(["test/lib/common","../all","app/core/core"],function(a){var b,c;return{setters:[function(a){b=a},function(a){},function(a){c=a}],execute:function(){b.describe("templateSrv",function(){function a(a){e.init({templating:{list:a},events:new c.Emitter})}var d,e;b.beforeEach(b.angularMocks.module("grafana.core")),b.beforeEach(b.angularMocks.module("grafana.services")),b.beforeEach(b.angularMocks.inject(function(a,b){d=b,e=a})),b.describe("init",function(){b.beforeEach(function(){a([{type:"query",name:"test",current:{value:"oogle"}}])}),b.it("should initialize template data",function(){var a=d.replace("this.[[test]].filters");b.expect(a).to.be("this.oogle.filters")})}),b.describe("replace can pass scoped vars",function(){b.beforeEach(function(){a([{type:"query",name:"test",current:{value:"oogle"}}])}),b.it("should replace $test with scoped value",function(){var a=d.replace("this.$test.filters",{test:{value:"mupp",text:"asd"}});b.expect(a).to.be("this.mupp.filters")}),b.it("should replace $test with scoped text",function(){var a=d.replaceWithText("this.$test.filters",{test:{value:"mupp",text:"asd"}});b.expect(a).to.be("this.asd.filters")})}),b.describe("replace can pass multi / all format",function(){b.beforeEach(function(){a([{type:"query",name:"test",current:{value:["value1","value2"]}}])}),b.it("should replace $test with globbed value",function(){var a=d.replace("this.$test.filters",{},"glob");b.expect(a).to.be("this.{value1,value2}.filters")}),b.it("should replace $test with piped value",function(){var a=d.replace("this=$test",{},"pipe");b.expect(a).to.be("this=value1|value2")}),b.it("should replace $test with piped value",function(){var a=d.replace("this=$test",{},"pipe");b.expect(a).to.be("this=value1|value2")})}),b.describe("variable with all option",function(){b.beforeEach(function(){a([{type:"query",name:"test",current:{value:"$__all"},options:[{value:"$__all"},{value:"value1"},{value:"value2"}]}])}),b.it("should replace $test with formatted all value",function(){var a=d.replace("this.$test.filters",{},"glob");b.expect(a).to.be("this.{value1,value2}.filters")})}),b.describe("variable with all option and custom value",function(){b.beforeEach(function(){a([{type:"query",name:"test",current:{value:"$__all"},allValue:"*",options:[{value:"value1"},{value:"value2"}]}])}),b.it("should replace $test with formatted all value",function(){var a=d.replace("this.$test.filters",{},"glob");b.expect(a).to.be("this.*.filters")}),b.it("should not escape custom all value",function(){var a=d.replace("this.$test",{},"regex");b.expect(a).to.be("this.*")})}),b.describe("lucene format",function(){b.it("should properly escape $test with lucene escape sequences",function(){a([{type:"query",name:"test",current:{value:"value/4"}}]);var c=d.replace("this:$test",{},"lucene");b.expect(c).to.be("this:value\\/4")})}),b.describe("format variable to string values",function(){b.it("single value should return value",function(){var a=d.formatValue("test");b.expect(a).to.be("test")}),b.it("multi value and glob format should render glob string",function(){var a=d.formatValue(["test","test2"],"glob");b.expect(a).to.be("{test,test2}")}),b.it("multi value and lucene should render as lucene expr",function(){var a=d.formatValue(["test","test2"],"lucene");b.expect(a).to.be('("test" OR "test2")')}),b.it("multi value and regex format should render regex string",function(){var a=d.formatValue(["test.","test2"],"regex");b.expect(a).to.be("(test\\.|test2)")}),b.it("multi value and pipe should render pipe string",function(){var a=d.formatValue(["test","test2"],"pipe");b.expect(a).to.be("test|test2")}),b.it("multi value and distributed should render distributed string",function(){var a=d.formatValue(["test","test2"],"distributed",{name:"build"});b.expect(a).to.be("test,build=test2")}),b.it("slash should be properly escaped in regex format",function(){var a=d.formatValue("Gi3/14","regex");b.expect(a).to.be("Gi3\\/14")})}),b.describe("can check if variable exists",function(){b.beforeEach(function(){a([{type:"query",name:"test",current:{value:"oogle"}}])}),b.it("should return true if exists",function(){var a=d.variableExists("$test");b.expect(a).to.be(!0)})}),b.describe("can hightlight variables in string",function(){b.beforeEach(function(){a([{type:"query",name:"test",current:{value:"oogle"}}])}),b.it("should insert html",function(){var a=d.highlightVariablesAsHtml("$test");b.expect(a).to.be('<span class="template-variable">$test</span>')}),b.it("should insert html anywhere in string",function(){var a=d.highlightVariablesAsHtml("this $test ok");b.expect(a).to.be('this <span class="template-variable">$test</span> ok')}),b.it("should ignore if variables does not exist",function(){var a=d.highlightVariablesAsHtml("this $google ok");b.expect(a).to.be("this $google ok")})}),b.describe("updateTemplateData with simple value",function(){b.beforeEach(function(){a([{type:"query",name:"test",current:{value:"muuuu"}}])}),b.it("should set current value and update template data",function(){var a=d.replace("this.[[test]].filters");b.expect(a).to.be("this.muuuu.filters")})}),b.describe("fillVariableValuesForUrl with multi value",function(){b.beforeEach(function(){a([{type:"query",name:"test",current:{value:["val1","val2"]}}])}),b.it("should set multiple url params",function(){var a={};d.fillVariableValuesForUrl(a),b.expect(a["var-test"]).to.eql(["val1","val2"])})}),b.describe("fillVariableValuesForUrl with multi value and scopedVars",function(){b.beforeEach(function(){a([{type:"query",name:"test",current:{value:["val1","val2"]}}])}),b.it("should set scoped value as url params",function(){var a={};d.fillVariableValuesForUrl(a,{test:{value:"val1"}}),b.expect(a["var-test"]).to.eql("val1")})}),b.describe("replaceWithText",function(){b.beforeEach(function(){a([{type:"query",name:"server",current:{value:"{asd,asd2}",text:"All"}},{type:"interval",name:"period",current:{value:"$__auto_interval",text:"auto"}}]),d.setGrafanaVariable("$__auto_interval","13m"),d.updateTemplateData()}),b.it("should replace with text except for grafanaVariables",function(){var a=d.replaceWithText("Server: $server, period: $period");b.expect(a).to.be("Server: All, period: 13m")})})})}}});