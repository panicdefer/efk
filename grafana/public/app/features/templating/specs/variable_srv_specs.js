/*! grafana - v4.0.2-1481203731 - 2016-12-08
 * Copyright (c) 2016 Torkel Ã–degaard; Licensed Apache-2.0 */

System.register(["test/lib/common","../all","moment","test/specs/helpers","app/core/core"],function(a){var b,c,d,e;return{setters:[function(a){b=a},function(a){},function(a){c=a},function(a){d=a},function(a){e=a}],execute:function(){b.describe("VariableSrv",function(){function a(a,c){b.describe(a,function(){var a={};a.setup=function(b){a.setupFn=b},b.beforeEach(function(){a.setupFn();var c={};c.metricFindQuery=b.sinon.stub().returns(f.$q.when(a.queryResult)),f.datasourceSrv.get=b.sinon.stub().returns(f.$q.when(c)),f.datasourceSrv.getMetricSources=b.sinon.stub().returns(a.metricSources),a.variable=f.variableSrv.addVariable(a.variableModel),f.variableSrv.updateOptions(a.variable),f.$rootScope.$digest()}),c(a)})}var f=new d["default"].ControllerTestContext;b.beforeEach(b.angularMocks.module("grafana.core")),b.beforeEach(b.angularMocks.module("grafana.controllers")),b.beforeEach(b.angularMocks.module("grafana.services")),b.beforeEach(f.providePhase(["datasourceSrv","timeSrv","templateSrv","$location"])),b.beforeEach(b.angularMocks.inject(function(a,b,c,d){f.$q=b,f.$rootScope=a,f.$location=c,f.variableSrv=d.get("variableSrv"),f.variableSrv.init({templating:{list:[]},events:new e.Emitter}),f.$rootScope.$digest()})),a("interval variable without auto",function(a){a.setup(function(){a.variableModel={type:"interval",query:"1s,2h,5h,1d",name:"test"}}),b.it("should update options array",function(){b.expect(a.variable.options.length).to.be(4),b.expect(a.variable.options[0].text).to.be("1s"),b.expect(a.variable.options[0].value).to.be("1s")})}),a("interval variable with auto",function(a){a.setup(function(){a.variableModel={type:"interval",query:"1s,2h,5h,1d",name:"test",auto:!0,auto_count:10};var d={from:c["default"](new Date).subtract(7,"days").toDate(),to:new Date};f.timeSrv.timeRange=b.sinon.stub().returns(d),f.templateSrv.setGrafanaVariable=b.sinon.spy()}),b.it("should update options array",function(){b.expect(a.variable.options.length).to.be(5),b.expect(a.variable.options[0].text).to.be("auto"),b.expect(a.variable.options[0].value).to.be("$__auto_interval")}),b.it("should set $__auto_interval",function(){var a=f.templateSrv.setGrafanaVariable.getCall(0);b.expect(a.args[0]).to.be("$__auto_interval"),b.expect(a.args[1]).to.be("12h")})}),a("query variable with empty current object and refresh",function(a){a.setup(function(){a.variableModel={type:"query",query:"",name:"test",current:{}},a.queryResult=[{text:"backend1"},{text:"backend2"}]}),b.it("should set current value to first option",function(){b.expect(a.variable.options.length).to.be(2),b.expect(a.variable.current.value).to.be("backend1")})}),a("query variable with multi select and new options does not contain some selected values",function(a){a.setup(function(){a.variableModel={type:"query",query:"",name:"test",current:{value:["val1","val2","val3"],text:"val1 + val2 + val3"}},a.queryResult=[{text:"val2"},{text:"val3"}]}),b.it("should update current value",function(){b.expect(a.variable.current.value).to.eql(["val2","val3"]),b.expect(a.variable.current.text).to.eql("val2 + val3")})}),a("query variable with multi select and new options does not contain any selected values",function(a){a.setup(function(){a.variableModel={type:"query",query:"",name:"test",current:{value:["val1","val2","val3"],text:"val1 + val2 + val3"}},a.queryResult=[{text:"val5"},{text:"val6"}]}),b.it("should update current value with first one",function(){b.expect(a.variable.current.value).to.eql("val5"),b.expect(a.variable.current.text).to.eql("val5")})}),a("query variable with multi select and $__all selected",function(a){a.setup(function(){a.variableModel={type:"query",query:"",name:"test",includeAll:!0,current:{value:["$__all"],text:"All"}},a.queryResult=[{text:"val5"},{text:"val6"}]}),b.it("should keep current All value",function(){b.expect(a.variable.current.value).to.eql(["$__all"]),b.expect(a.variable.current.text).to.eql("All")})}),a("query variable with numeric results",function(a){a.setup(function(){a.variableModel={type:"query",query:"",name:"test",current:{}},a.queryResult=[{text:12,value:12}]}),b.it("should set current value to first option",function(){b.expect(a.variable.current.value).to.be("12"),b.expect(a.variable.options[0].value).to.be("12"),b.expect(a.variable.options[0].text).to.be("12")})}),a("basic query variable",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test"},a.queryResult=[{text:"backend1"},{text:"backend2"}]}),b.it("should update options array",function(){b.expect(a.variable.options.length).to.be(2),b.expect(a.variable.options[0].text).to.be("backend1"),b.expect(a.variable.options[0].value).to.be("backend1"),b.expect(a.variable.options[1].value).to.be("backend2")}),b.it("should select first option as value",function(){b.expect(a.variable.current.value).to.be("backend1")})}),a("and existing value still exists in options",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test"},a.variableModel.current={value:"backend2",text:"backend2"},a.queryResult=[{text:"backend1"},{text:"backend2"}]}),b.it("should keep variable value",function(){b.expect(a.variable.current.text).to.be("backend2")})}),a("and regex pattern exists",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test"},a.variableModel.regex="/apps.*(backend_[0-9]+)/",a.queryResult=[{text:"apps.backend.backend_01.counters.req"},{text:"apps.backend.backend_02.counters.req"}]}),b.it("should extract and use match group",function(){b.expect(a.variable.options[0].value).to.be("backend_01")})}),a("and regex pattern exists and no match",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test"},a.variableModel.regex="/apps.*(backendasd[0-9]+)/",a.queryResult=[{text:"apps.backend.backend_01.counters.req"},{text:"apps.backend.backend_02.counters.req"}]}),b.it("should not add non matching items, None option should be added instead",function(){b.expect(a.variable.options.length).to.be(1),b.expect(a.variable.options[0].isNone).to.be(!0)})}),a("regex pattern without slashes",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test"},a.variableModel.regex="backend_01",a.queryResult=[{text:"apps.backend.backend_01.counters.req"},{text:"apps.backend.backend_02.counters.req"}]}),b.it("should return matches options",function(){b.expect(a.variable.options.length).to.be(1)})}),a("regex pattern remove duplicates",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test"},a.variableModel.regex="/backend_01/",a.queryResult=[{text:"apps.backend.backend_01.counters.req"},{text:"apps.backend.backend_01.counters.req"}]}),b.it("should return matches options",function(){b.expect(a.variable.options.length).to.be(1)})}),a("with include All",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test",includeAll:!0},a.queryResult=[{text:"backend1"},{text:"backend2"},{text:"backend3"}]}),b.it("should add All option",function(){b.expect(a.variable.options[0].text).to.be("All"),b.expect(a.variable.options[0].value).to.be("$__all")})}),a("with include all and custom value",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test",includeAll:!0,allValue:"*"},a.queryResult=[{text:"backend1"},{text:"backend2"},{text:"backend3"}]}),b.it("should add All option with custom value",function(){b.expect(a.variable.options[0].value).to.be("$__all")})}),a("without sort",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test",sort:0},a.queryResult=[{text:"bbb2"},{text:"aaa10"},{text:"ccc3"}]}),b.it("should return options without sort",function(){b.expect(a.variable.options[0].text).to.be("bbb2"),b.expect(a.variable.options[1].text).to.be("aaa10"),b.expect(a.variable.options[2].text).to.be("ccc3")})}),a("with alphabetical sort (asc)",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test",sort:1},a.queryResult=[{text:"bbb2"},{text:"aaa10"},{text:"ccc3"}]}),b.it("should return options with alphabetical sort",function(){b.expect(a.variable.options[0].text).to.be("aaa10"),b.expect(a.variable.options[1].text).to.be("bbb2"),b.expect(a.variable.options[2].text).to.be("ccc3")})}),a("with alphabetical sort (desc)",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test",sort:2},a.queryResult=[{text:"bbb2"},{text:"aaa10"},{text:"ccc3"}]}),b.it("should return options with alphabetical sort",function(){b.expect(a.variable.options[0].text).to.be("ccc3"),b.expect(a.variable.options[1].text).to.be("bbb2"),b.expect(a.variable.options[2].text).to.be("aaa10")})}),a("with numerical sort (asc)",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test",sort:3},a.queryResult=[{text:"bbb2"},{text:"aaa10"},{text:"ccc3"}]}),b.it("should return options with numerical sort",function(){b.expect(a.variable.options[0].text).to.be("bbb2"),b.expect(a.variable.options[1].text).to.be("ccc3"),b.expect(a.variable.options[2].text).to.be("aaa10")})}),a("with numerical sort (desc)",function(a){a.setup(function(){a.variableModel={type:"query",query:"apps.*",name:"test",sort:4},a.queryResult=[{text:"bbb2"},{text:"aaa10"},{text:"ccc3"}]}),b.it("should return options with numerical sort",function(){b.expect(a.variable.options[0].text).to.be("aaa10"),b.expect(a.variable.options[1].text).to.be("ccc3"),b.expect(a.variable.options[2].text).to.be("bbb2")})}),a("datasource variable with regex filter",function(a){a.setup(function(){a.variableModel={type:"datasource",query:"graphite",name:"test",current:{value:"backend4_pee",text:"backend4_pee"},regex:"/pee$/"},a.metricSources=[{name:"backend1",meta:{id:"influx"}},{name:"backend2_pee",meta:{id:"graphite"}},{name:"backend3",meta:{id:"graphite"}},{name:"backend4_pee",meta:{id:"graphite"}}]}),b.it("should set only contain graphite ds and filtered using regex",function(){b.expect(a.variable.options.length).to.be(2),b.expect(a.variable.options[0].value).to.be("backend2_pee"),b.expect(a.variable.options[1].value).to.be("backend4_pee")}),b.it("should keep current value if available",function(){b.expect(a.variable.current.value).to.be("backend4_pee")})}),a("update custom variable",function(a){a.setup(function(){a.variableModel={type:"custom",query:"hej, hop, asd",name:"test"}}),b.it("should update options array",function(){b.expect(a.variable.options.length).to.be(3),b.expect(a.variable.options[0].text).to.be("hej"),b.expect(a.variable.options[1].value).to.be("hop")})})})}}});